*To install axios-> npm i axios
*To install Toast-> npm install --save vue-toastification
*To install sweatalert2->npm install sweetalert2


*app.js

import { createApp, h } from 'vue'
import { createInertiaApp } from '@inertiajs/vue3'
import NProgress from 'nprogress'
import { router } from '@inertiajs/vue3'
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap'
import { library } from '@fortawesome/fontawesome-svg-core';
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';
import { faEye, faPenToSquare, faTrash } from '@fortawesome/free-solid-svg-icons';
import Toast from 'vue-toastification'
import 'vue-toastification/dist/index.css'

library.add(faEye, faPenToSquare, faTrash);

createInertiaApp({
  resolve: name => {
    const pages = import.meta.glob('./Pages/**/*.vue', { eager: true })
    return pages[`./Pages/${name}.vue`]
  },
  setup({ el, App, props, plugin }) {
    createApp({ render: () => h(App, props) })
      .use(plugin)
      .component("font-awesome-icon", FontAwesomeIcon)
      .use(Toast)
      .mount(el)
  },
})



router.on('start', () => {
    NProgress.start()
})


router.on('finish', () =>{
    NProgress.done()
})

1.AddCarPage.vue

<template>
      
      <AdminLayout/>
      <div class="main_body">
            <Link href="/admin/car" class="btn btn-primary">View car</Link>
            <div class="card">
                  <div class="card_header">
                        Add Car
                  </div>
                  <div class="card_body">
                        
                        <form @submit.prevent="submit">
                         <input type="text" v-model="formData.name" class="form-control" placeholder="Enter Name">
                         <br>
                         <input type="text" v-model="formData.brand" class="form-control" placeholder="Enter Brand">
                         <br>
                         <input type="text" v-model="formData.model" class="form-control" placeholder="Enter Model">
                         <br>
                         <input type="text" v-model="formData.car_type" class="form-control" placeholder="Enter Car type">
                         <br>
                         <input type="text" v-model="formData.daily_rent_price" class="form-control" placeholder="Enter Daily rent price">
                         <br>
                         <select class="form-control" v-model="formData.availability">
                               <option value="" disabled selected>Availability</option>
                               <option value="1">Yes</option>
                               <option value="0">No</option>
                         </select>
                         <br>
                         <input type="file" id="image" @change="handleImage" class="form-control">
                         <br>
                         <input type="text" v-model="formData.year" class="form-control" placeholder="Enter manufacturing year">
                         <br>
                         <button type="submit">Add</button>
                        </form>
                  </div>
            </div>
      </div>
      
</template>

<script setup>
import AdminLayout from '@/Layout/AdminLayout.vue'
import{Link} from '@inertiajs/vue3'
import{reactive} from 'vue'
import axios from 'axios'
import {useToast} from 'vue-toastification'


const toast = useToast();

const formData = reactive({
  name:'',
  brand:'',
  model:'',
  car_type:'',
  daily_rent_price:'',
  availability:'',
  image:null,
  year:''

})

const defaultFormData = reactive({
  name:'',
  brand:'',
  model:'',
  car_type:'',
  daily_rent_price:'',
  availability:'',
  image:null,
  year:''

})

function handleImage(event){
      formData.image = event.target.files[0]
      console.log(formData.image)
}

const submit = async()=>{
      let data = new FormData()
      data.append('name',formData.name)
      data.append('brand',formData.brand)
      data.append('model',formData.model)
      data.append('car_type',formData.car_type)
      data.append('daily_rent_price',formData.daily_rent_price)
      data.append('availability',formData.availability)
      data.append('image',formData.image)
      data.append('year',formData.year)
      try{
        let res = await axios.post('/admin/add_car',data,{
           headers:{'Content-type':'multipart/form-data'}
        })
        toast.success(res.data.message)
      //   Object.assign(formData,defaultFormData);
        document.getElementById('image').value='';
      }catch(error){

      }
      
}

</script>

<style scoped>
.main_body{
     width: cal(100vw - 10vw);
     margin-left: 10vw;
     padding:2vw;
 }
</style>



*
function AddCar(Request $request){
      $carData = $request->except('image');
      if($request->hasFile('image')){
          $imagePath = $request->file('image')->store('images','public');
          $carData['image'] = $imagePath;
      }

      $car = Car::create($carData);
        if($car){
            return response()->json([
            'message'=>'Car added successfully',
            'status'=>'200'
        ]);
      }else{
            return response()->json([
            'message'=>'Car addition operaton fail',
            'status'=>'500'
        ]);
      
      
   }
}


*Delete cars and refresh after delete

import Swal from "sweetalert2";


const toast = useToast();


let carData = reactive({
   cars:[]
})

const fetchCars=async()=>{
   let res = await axios.get('/admin/get_cars');
    carData.cars = res.data
}


const DeleteCar=async(id)=>{
      Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, delete it!"
            }).then(async(result) => {
            if (result.isConfirmed) {
            try{
                  let res = await axios.post(`/admin/delete_car/${id}`); 
                  toast.success(res.data.message)
                  await fetchCars();
            
                  }catch(error){
                        console.log(error)
                 }
            }
      });
      
}

onMounted(fetchCars)

